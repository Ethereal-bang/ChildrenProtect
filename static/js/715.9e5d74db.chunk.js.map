{"version":3,"file":"static/js/715.9e5d74db.chunk.js","mappings":"+OAEaA,EAAQ,SAACC,EAAkBC,GACpC,IAAMC,EAAO,IAAIC,SAGjB,OAFAD,EAAKE,OAAO,WAAYJ,GACxBE,EAAKE,OAAO,WAAYH,GACjBI,EAAAA,EAAAA,KAAa,eAAgBH,EACvC,EAGYI,EAAsB,SAACC,GAChC,IAAML,EAAO,IAAIC,SAEjB,OADAD,EAAKE,OAAO,QAASG,GACdF,EAAAA,EAAAA,KAAa,0BAA2BH,EAClD,EAGYM,EAAa,SAACD,EAAeE,GACtC,IAAMP,EAAO,IAAIC,SAGjB,OAFAD,EAAKE,OAAO,QAASG,GACrBL,EAAKE,OAAO,OAAQK,GACbJ,EAAAA,EAAAA,KAAa,2BAA4BH,EACnD,EAGYQ,EAAS,SAACC,EAAaJ,GAChC,IAAML,EAAO,IAAIC,SAGjB,OAFAD,EAAKE,OAAO,cAAeO,GAC3BT,EAAKE,OAAO,QAASG,GACdF,EAAAA,EAAAA,KAAa,iCAAkCH,EACzD,C,wFC3BYG,EAAUO,IAAAA,OAAa,CAChCC,QAAS,2BAETC,OAAQ,SAGZT,EAAQU,aAAaC,QAAQC,KAAI,SAACC,GAC1B,IAAMC,GAAQC,EAAAA,EAAAA,KAId,OAHID,GAASD,EAAOG,UAChBH,EAAOG,QAAQF,MAAQA,GAEpBD,CACV,IAAE,SAACI,GACA,OAAOC,QAAQC,OAAQF,EAC1B,G,0ICZU,SAASG,IACtB,OAA4BC,EAAAA,EAAAA,WAAkB,GAA9C,eAAKC,EAAL,KAAcC,EAAd,KACA,GAAoCF,EAAAA,EAAAA,UAAiB,IAArD,eAAKG,EAAL,KAAkBC,EAAlB,KACA,GAAoCJ,EAAAA,EAAAA,UAAiB,IAArD,eAAKK,EAAL,KAAkBC,EAAlB,KACIC,GAAWC,EAAAA,EAAAA,MAGR3B,GAAS4B,EAAAA,EAAAA,MAAcC,MAAvB7B,OAGP8B,EAAAA,EAAAA,YAAU,WAENT,EADCG,IAAcF,EAGlB,GAAC,CAACA,EAAaE,IAYhB,OACE,gBAAKO,UAAU,YAAf,UACE,iBAAKA,UAAU,WAAf,WACE,gBAAKA,UAAU,QAAf,uCAGA,iBAAKA,UAAU,MAAf,WACE,gBAAKA,UAAU,OAAf,iCACA,gBAAKA,UAAU,QAAf,UACE,kBACEC,KAAK,WACLC,YAAY,iCACZC,MAAOZ,EACPa,SAAU,SAACC,GAAMX,EAAe,IAAKF,EAAea,EAAEC,OAAOH,MAAO,OAGxE,gBAAKH,UAAU,OAAf,yDACA,gBAAKA,UAAU,WAAf,UACE,kBACEC,KAAK,WACLM,MAAO,CAAE,YAAgBlB,EAA+B,GAArB,mBAAwB,MAASA,EAA2B,GAAnB,oBAC5Ea,YAAY,iCACZC,MAAOV,EACPW,SAAU,SAACC,GAAKX,EAAeW,EAAEC,OAAOH,MAAO,OAGnD,gBAAKH,UAAU,OAAf,SAEKX,GAEG,oBADF,gBAAKW,UAAU,OAAf,gFAMR,gBAAKA,UAAU,WAAf,UACE,mBAAQQ,QA7CD,YACbpC,EAAAA,EAAAA,IAAOqB,EAAaxB,GAAOwC,MAAK,SAAAC,GAE9B,OADAf,EAAS,SAAU,CAACgB,SAAQ,IACrBC,EAAA,WAAgBF,EAAI9C,KAAKgD,QACjC,IAAE,SAAA5B,GACD,OAAO4B,EAAA,SAAc5B,EAAI6B,SAASjD,KAAKgD,QACxC,GACF,EAsCO,4CAKT,C","sources":["api/loginApi.ts","api/myAxios.ts","pages/setpassword/SetPassword.tsx"],"sourcesContent":["import {myAxios} from \"./myAxios\";\r\n\r\nexport const login = (username: string, password: string) => {\r\n    const data = new FormData();\r\n    data.append(\"username\", username);\r\n    data.append(\"password\", password);\r\n    return myAxios.post(\"/admin/login\", data);\r\n}\r\n\r\n// 找回密码-获取验证码\r\nexport const getVerificationCode = (phone: string) => {\r\n    const data = new FormData();\r\n    data.append(\"phone\", phone);\r\n    return myAxios.post(\"/admin/password/getCode\", data);\r\n}\r\n\r\n// 找回密码-验证码是否匹配\r\nexport const verifyCode = (phone: string, code: string) => {\r\n    const data = new FormData();\r\n    data.append(\"phone\", phone);\r\n    data.append(\"code\", code);\r\n    return myAxios.post(\"/admin/password/sendCode\", data);\r\n}\r\n\r\n// 重置密码\r\nexport const setPwd = (pwd: string, phone: string) => {\r\n    const data = new FormData();\r\n    data.append(\"newPassword\", pwd);\r\n    data.append(\"phone\", phone);\r\n    return myAxios.post(\"/admin/password/setNewPassword\", data);\r\n}","import axios from \"axios\";\r\nimport getToken from \"../utils/getToken\";\r\n\r\nexport const myAxios = axios.create({\r\n    baseURL: \"http://124.223.99.4:8080\",\r\n    // timeout: 2000,\r\n    method: \"POST\",  // 默认POST\r\n})\r\n\r\nmyAxios.interceptors.request.use((config) => {\r\n        const token = getToken();\r\n        if (token && config.headers) {\r\n            config.headers.token = token;\r\n        }\r\n        return config;\r\n    }, (err) => {\r\n        return Promise.reject((err));\r\n    }\r\n)","import React, { useEffect, useState } from 'react'\r\nimport {useLocation, useNavigate} from 'react-router-dom'\r\nimport './SetPassword.css'\r\nimport {setPwd} from \"../../api/loginApi\";\r\nimport {message} from \"antd\";\r\nexport default function SetPassword() {\r\n  let [isRight, setIsRight] = useState<boolean>(true)\r\n  let [passwordOne, setPasswordOne] = useState<string>('')\r\n  let [passwordTwo, setPasswordTwo] = useState<string>('') \r\n  let navigate = useNavigate()\r\n\r\n  // 获取路由参数-phone\r\n  const {phone} = useLocation().state as {phone: string};\r\n\r\n  // 判断两次密码是否一致\r\n  useEffect(()=>{\r\n    if(passwordTwo!==passwordOne)\r\n      setIsRight(false)\r\n    else setIsRight(true)\r\n  },[passwordOne, passwordTwo])\r\n\r\n  // 去重新登录\r\n  let newLogin = ()=>{\r\n    setPwd(passwordTwo, phone).then(res => {\r\n      navigate('/login', {replace:true})  // 跳转到登录页重新登录以获取token\r\n      return message.success(res.data.message);\r\n    }, err => {\r\n      return message.error(err.response.data.message);\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className='set-outer'>\r\n      <div className=\"loginBox\">\r\n        <div className=\"title\">\r\n          重置密码\r\n        </div>\r\n        <div className=\"mid\">\r\n          <div className=\"user\">新密码</div>\r\n          <div className='input'>\r\n            <input\r\n              type=\"password\"\r\n              placeholder='输入新密码' \r\n              value={passwordOne}\r\n              onChange={(e)=>{ setPasswordTwo('') ;setPasswordOne(e.target.value)}}\r\n            />\r\n          </div>\r\n          <div className=\"pass\">再次输入新密码</div>\r\n          <div className='password'>\r\n            <input \r\n              type=\"password\" \r\n              style={{ \"borderColor\": !isRight ? 'rgb(216, 26, 26)' : '',\"color\":!isRight?\"rgb(216, 26, 26)\":\"\"}} \r\n              placeholder='输入新密码' \r\n              value={passwordTwo}\r\n              onChange={(e)=>{setPasswordTwo(e.target.value)}}\r\n            />\r\n          </div>\r\n          <div className=\"tips\">\r\n            {\r\n              !isRight ?\r\n                <div className=\"left\">密码不一致请重新输入</div>\r\n                : <div />\r\n            }\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"loginBtn\">\r\n          <button onClick={newLogin}>重新登陆</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n"],"names":["login","username","password","data","FormData","append","myAxios","getVerificationCode","phone","verifyCode","code","setPwd","pwd","axios","baseURL","method","interceptors","request","use","config","token","getToken","headers","err","Promise","reject","SetPassword","useState","isRight","setIsRight","passwordOne","setPasswordOne","passwordTwo","setPasswordTwo","navigate","useNavigate","useLocation","state","useEffect","className","type","placeholder","value","onChange","e","target","style","onClick","then","res","replace","message","response"],"sourceRoot":""}